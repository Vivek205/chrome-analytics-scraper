// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Start of AuthJS User Schemas
model Account {
    id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId            String   @db.Uuid
    type              String
    provider          String
    providerAccountId String
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope             String?
    id_token           String?  @db.Text
    session_state      String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @default(now()) @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt

    @@map("sessions")
}

model User {
    id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    userExtensions UserExtension[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @default(now()) @updatedAt

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

// End of AuthJS User Schemas

model Extension {
    id        String            @id @default(uuid())
    name      String            @db.VarChar(255)
    url       String            @db.VarChar(1024)
    createdAt DateTime          @default(now())
    updatedAt DateTime          @default(now()) @updatedAt
    metrics   ExtensionMetric[] @relation("ExtensionToMetrics")
    users     UserExtension[]

    @@map("extensions")
}

model UserExtension {
    userId      String @db.Uuid
    extensionId String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    user      User      @relation(fields: [userId], references: [id])
    extension Extension @relation(fields: [extensionId], references: [id])

    @@id([userId, extensionId])
    @@index([userId])
    @@map("user_extensions")
}

model ExtensionMetric {
    id           String    @id @default(uuid())
    extensionId  String
    activeUsers  Int?
    ratingsCount Int?
    ratingsValue Float?
    scrapedAt    DateTime  @default(now())
    extension    Extension @relation("ExtensionToMetrics", fields: [extensionId], references: [id], onDelete: Cascade)

    @@unique([extensionId, scrapedAt])
    @@index([extensionId])
    @@index([scrapedAt])
    @@map("extension_metrics")
}
