// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Start of AuthJS User Schemas

model User {
    id            String          @id @default(uuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt
    extensions UserExtension[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

// End of AuthJS User Schemas

model Extension {
    id        String            @id @default(uuid())
    name      String            @db.VarChar(255)
    url       String            @db.VarChar(1024)
    createdAt DateTime          @default(now()) @map("created_at")
    updatedAt DateTime          @default(now()) @updatedAt @map("updated_at")
    metrics   ExtensionMetric[] @relation("ExtensionToMetrics")
    users     UserExtension[]
}

model UserExtension {
    userId      String
    extensionId String
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

    user      User      @relation(fields: [userId], references: [id])
    extension Extension @relation(fields: [extensionId], references: [id])

    @@id([userId, extensionId])
    @@index([userId])
}

model ExtensionMetric {
    id           String    @id @default(uuid())
    extensionId  String    @map("extension_id")
    activeUsers  Int?      @map("active_users")
    ratingsCount Int?      @map("ratings_count")
    ratingsValue Float?    @map("ratings_value")
    scrapedAt    DateTime  @default(now()) @map("scraped_at")
    extension    Extension @relation("ExtensionToMetrics", fields: [extensionId], references: [id], onDelete: Cascade)

    @@unique([extensionId, scrapedAt])
    @@index([extensionId])
    @@index([scrapedAt])
}
